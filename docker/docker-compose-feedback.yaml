name: eval_loop
services:
  fastapi_server:
    build:
      context: /home/cc/eval-loop-chi/fastapi_pt
      dockerfile: Dockerfile
    container_name: fastapi_server
    ports:
      - "8000:8000"  # for HTTP requests
    networks:
      - eval_loop_network
    
  
  minio:
    image: minio/minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment: 
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - food11:/data
    command: server /data --console-address ':9001'
    networks:
      - eval_loop_network
    
  # Initialization container for MinIO
  minio-init:
    image: minio/mc
    depends_on:
      - minio
    volumes:
      - /home/cc/eval-loop-chi/data/task_0.json:/tmp/task_0.json
      - /home/cc/eval-loop-chi/gourmetgram/instance/uploads/test_image.jpeg:/tmp/test_image.jpeg
    entrypoint: |
      /bin/sh -c "
      # Wait for MinIO to be ready
      sleep 5
      
      # Configure MinIO client
      mc alias set myminio http://minio:9000 minioadmin minioadmin
      
      # Create buckets if they don't exist
      mc mb -p myminio/production
      mc mb -p myminio/labelstudio
      mc mb -p myminio/tracking
      mc mb -p myminio/cleanproduction
      mc mb -p myminio/lowconfidence
      mc mb -p myminio/userfeedback
      mc mb -p myminio/userfeedback2

      mc anonymous set public myminio/production
      
      # Create labelstudio structure
      mc mb -p myminio/labelstudio/tasks/randomsampled
      mc mb -p myminio/labelstudio/tasks/lowconfidence
      mc mb -p myminio/labelstudio/tasks/userfeedback
      
      mc mb -p myminio/labelstudio/output/randomsampled
      mc mb -p myminio/labelstudio/output/lowconfidence
      mc mb -p myminio/labelstudio/output/userfeedback
      mc mb -p myminio/labelstudio/output/userfeedback2
      
      # Copy JSON files
      mc cp /tmp/task_0.json myminio/labelstudio/tasks/randomsampled/
      mc cp /tmp/task_0.json myminio/labelstudio/tasks/lowconfidence/
      mc cp /tmp/task_0.json myminio/labelstudio/tasks/userfeedback/

      # Copy test image
      mc mb -p myminio/production/class_10
      mc cp /tmp/test_image.jpeg myminio/production/class_10/

      # Create empty production.json in tracking bucket
      echo '[]' > /tmp/production.json
      echo '[]' > /tmp/processed_randomsampled.json
      echo '[]' > /tmp/processed_lowconfidence.json
      echo '[]' > /tmp/processed_userfeedback.json
      echo '[]' > /tmp/processed_userfeedback2.json
      mc cp /tmp/production.json myminio/tracking/
      mc cp /tmp/processed_randomsampled.json myminio/tracking/
      mc cp /tmp/processed_lowconfidence.json myminio/tracking/
      mc cp /tmp/processed_userfeedback.json myminio/tracking/
      mc cp /tmp/processed_userfeedback2.json myminio/tracking/
      
      echo 'MinIO initialization completed'
      "
    networks:
      - eval_loop_network

  flask:
    build:
      context: /home/cc/eval-loop-chi/gourmetgram
      dockerfile: Dockerfile
    container_name: flask
    ports:
      - "5000:5000"
    environment:
      - FASTAPI_SERVER_URL=http://fastapi_server:8000 # let Flask app know where to access the inference endpoint
    networks:
      - eval_loop_network
  
  label-studio:
    image: heartexlabs/label-studio:latest
    ports:
      - "8080:8080"
    volumes:
      - /home/cc/eval-loop-chi/scripts:/label-studio/scripts
    environment:
      - LABEL_STUDIO_URL=http://label-studio:8080
      - LABEL_STUDIO_USERNAME=gourmetgramuser@gmail.com
      - LABEL_STUDIO_PASSWORD=gourmetgrampassword
      - LABEL_STUDIO_USER_TOKEN=ab9927067c51ff279d340d7321e4890dc2841c4a
      - LABEL_STUDIO_LOCAL_FILES_SERVING_ENABLED=true
      - LABEL_STUDIO_LOCAL_FILES_DOCUMENT_ROOT=/label-studio/data
      - POSTGRES_HOST=app-db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=apppass
      - POSTGRES_DB=appdb
    depends_on:
      - minio-init
    networks:
      - eval_loop_network
  
  jupyter:
    image: quay.io/jupyter/minimal-notebook:latest
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - FOOD11_DATA_DIR=/mnt/Food-11
    volumes:
      - /home/cc/eval-loop-chi/workspace:/home/jovyan/work # mount workspace
      - food11:/mnt
    command: >
      bash -c "python3 -m pip install alibi-detect && start-notebook.sh"
    networks:
      - eval_loop_network

networks:
  eval_loop_network:
    name: eval_loop_network
    driver: bridge


volumes:
  food11:
    external: true
